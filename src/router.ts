import { auth } from "./auth"
import { getEnv, getRequest } from "./store"

export const router = async () => {
    const request = getRequest()
    const env = getEnv()

    // Handle OAuth callback from Twitch
    if (request.url.includes('/api/auth/callback/twitch')) {
        const response = await auth()
        return response
    }

    // Handle /start URL and redirect to Twitch. This is necessary due to the broken redirect caused by the Twitch Android app.
    if (request.url.includes('/api/auth/redirect')) {
        const url = new URL(request.url)
        if (url.searchParams.get('twitchUrl')) {
            const twitchUrl = url.searchParams.get('twitchUrl')
            /**
             * How does this regex work?
             * Firstly, it matches the Twitch origin URL pattern.
             * Then, it checks if the URL contains all necessary query parameters (client_id, redirect_uri, response_type, scope, state).
             * The `.{36}` part matches exactly 36 characters after the state parameter, which is a fixed length for UUIDs generated by crypto.randomUUID().
             * If you need to add or remove query parameters to the Twitch OAuth URL, make sure to update this regex accordingly.
             */
            if (
                twitchUrl &&
                twitchUrl.match(/^https:\/\/id\.twitch\.tv\/oauth2\/authorize\?client_id=.*&redirect_uri=.*&response_type=code&scope=.*&state=.{36}/gi)
            ) {
                return Response.redirect(twitchUrl, 302)
            } else {
                return new Response('Missing twitchUrl', { status: 400 })
            }
        }
    }

    return Response.redirect('https://twitch.tv/' + env.BROADCASTER_LOGIN, 302)
}